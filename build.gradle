/*
 * This file was generated by the Gradle 'init' task.
 *
 * (#)build.gradle  0.12.0  08/06/2024
 * (#)build.gradle  0.11.0  08/05/2024
 * (#)build.gradle  0.10.0  07/26/2024
 * (#)build.gradle  0.9.0   06/22/2024
 * (#)build.gradle  0.8.1   06/14/2024
 * (#)build.gradle  0.8.0   06/14/2024
 * (#)build.gradle  0.7.0   05/24/2024
 * (#)build.gradle  0.6.0   05/23/2024
 * (#)build.gradle  0.5.0   05/18/2024
 * (#)build.gradle  0.4.0   05/17/2024
 * (#)build.gradle  0.3.0   05/03/2024
 * (#)build.gradle  0.2.0   05/01/2024
 * (#)build.gradle  0.1.0   04/30/2024
 *
 * @author   Jonathan Parker
 * @version  0.12.0
 * @since    0.1.0
 *
 * MIT License
 *
 * Copyright (c) 2024 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Requires systemProp.macosArchitecture=intel or systemProp.macosArchitecture=silicon
// to be set in $HOME/.gradle/gradle.properties to work correctly.

plugins {
    id 'application'
    id 'java'
    id 'maven-publish'
}

apply plugin : 'java'

ext {
    javaMainClass = 'net.jmp.demo.redis.Main'
    macosArchitecture = System.getProperty('macosArchitecture')
}

println "The macOS architecture is ${macosArchitecture}"

application {
    mainClass.set(javaMainClass)
}

repositories {
    mavenLocal()
    mavenCentral()  // url = uri('https://repo.maven.apache.org/maven2/')

    maven {
        url = uri('http://maven.repository.redhat.com/techpreview/all')

        allowInsecureProtocol = true
    }

    maven {
        url = uri('http://localhost:8081/nexus/content/repositories/releases')

        allowInsecureProtocol = true
    }
}

dependencies {
    runtimeOnly         libs.ch.qos.logback.logback.classic
    runtimeOnly         libs.ch.qos.logback.logback.core
    implementation      libs.com.google.code.gson.gson
    implementation      libs.org.redisson.redisson

    if (macosArchitecture == "silicon") {
        runtimeOnly         ("io.netty:netty-resolver-dns-native-macos:4.1.109.Final:osx-aarch_64")
    } else {
        runtimeOnly         ("io.netty:netty-resolver-dns-native-macos:4.1.109.Final:osx-x86_64")
    }

    implementation      libs.org.slf4j.slf4j.api
    implementation      libs.org.slf4j.slf4j.ext
    testImplementation  libs.junit.junit
}

group = 'net.jmp.demo.redis'
version = '0.12.0'
description = 'The Redis Demonstration'

println "The groupId is ${project.group}"
println "The artifactId is ${project.name}" // Set in settings.gradle
println "The version is ${project.version}"

java.sourceCompatibility = JavaVersion.VERSION_22

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(22)
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

/*
 * Execute with gradle execProgram instead of gradle run
 */

tasks.register('execProgram', JavaExec) {
    allJvmArgs = ['-ea', '-Dapp.configurationFile=config/config.json', '-Dlogback.configurationFile=config/logback.xml']
    classpath = sourceSets.main.runtimeClasspath
    description = "Run the main class with JavaExecTask"
    group = "Execution"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
}
